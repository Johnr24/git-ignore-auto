name: pipeline

on: [push, pull_request]

jobs:
  check:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        rust: [stable, beta, nightly]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: build
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run

      - name: test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- --nocapture --quiet

      - name: formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  cargo_publish:
    if: startsWith(github.ref, 'refs/tags/t')
    needs: check
    name: Publish Cargo Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cargo login $CRATES_IO_TOKEN
      - run: cargo publish
    env:
      CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  github_build:
    # if: startsWith(github.ref, 'refs/tags/v')
    needs: check
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ignore-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: git-ignore-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: git-ignore-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: git-ignore-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools libssl-dev

      - name: Build target
        if: matrix.target != 'x86_64-unknown-linux-musl'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build target (musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare build artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip git-ignore.exe
          cp ../../../assets/* .
          7z a ../../../${{ matrix.name }} git-ignore.exe _git-ignore git-ignore.1 git-ignore.bash git-ignore.elv git-ignore.fish _git-ignore.ps1
          cd -
      - name: Prepare build artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip git-ignore
          cp ../../../assets/* .
          tar czvf ../../../${{ matrix.name }} git-ignore _git-ignore git-ignore.1 git-ignore.bash git-ignore.elv git-ignore.fish _git-ignore.ps1
          cd -
      - name: Upload build artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  github_release:
    # if: startsWith(github.ref, 'refs/tags/v')
    name: Create GitHub Release
    needs: github_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Linux GNU artifact
        uses: actions/download-artifact@v1
        with:
          name: git-ignore-x86_64-unknown-linux-gnu.tar.gz
          path: .

      - name: Download Linux MUSL artifact
        uses: actions/download-artifact@v1
        with:
          name: git-ignore-x86_64-unknown-linux-musl.tar.gz
          path: .

      - name: Download Darwin artifact
        uses: actions/download-artifact@v1
        with:
          name: git-ignore-x86_64-apple-darwin.tar.gz
          path: .

      - name: Download Windows artifact
        uses: actions/download-artifact@v1
        with:
          name: git-ignore-x86_64-pc-windows-msvc.zip
          path: .

      - name: Print directory
        run: ls -R

      - name: Create GitHub release ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            git-ignore-x86_64-apple-darwin.tar.gz
            git-ignore-x86_64-pc-windows-msvc.zip
            git-ignore-x86_64-unknown-linux-gnu.tar.gz
            git-ignore-x86_64-unknown-linux-musl.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
